#!/bin/bash
#================================================================
# HEADER
#================================================================
#%Usage: ${SCRIPT_NAME} [OPTION] [ACTION]
#%A tool to easily create and manage multiple pointers via xinput (MPX)
#%    
#%
#%Options:
#%    -q, --quiet                   Don't display notifications
#%    --master                      set the master to move the target input devices to
#%    -c                            Create saved master device as opposed to only adding if the master was already created
#%    -f, --force-create            Create master even if no slaves are available
#%    --no-load                     Do not load settings from file
#%    --file                        Load/Save from/to this file
#%    -i, --ignore-known-slaves     Ignores all slaves. This option is implicitly set when using -n
#%
#%Actions
#%    -h, --help                    Print this help
#%    -v, --version                 Print script information
#%    -r, --reset                   Merge all auxiliary input back into the default master
#%    -d, --dynamic                 Take all input devices that are currently being used and assignment them them to a given master or the next master in the configFile if master is not given
#%    -s, --start                   Restores settings from configFile by attaching all available slaves to the appropriate masters, creating them if needed. 
#%    --resume                      The default action. Shorthand for ${SCRIPT_NAME} -c --start; This is the default option if no arguments are given                 
#%    --save                        Saves current settings to configFile
#%    --next-master             Assigns all unkown inputs to master
#%    --reload                      Resets and load
#%    --move masterName targets     TODO implement
#%
#%
#%Examples:
#%    ${SCRIPT_NAME} -s             #saves settings
#%    ${SCRIPT_NAME} --master=myMaster -d             #Moves all active inputs to myMaster
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} (taaparthur.no-ip.org) 1.1.2
#-    author          Arthur Williams
#-    license         MIT
#================================================================
# END_OF_HEADER
#================================================================
#MAN generated with help2man -No dual-pointer-x.1 "./dual-pointer-x";

declare -A knownSlaves

#consts
TYPE_MOUSE=1
TYPE_KEYBOARD=2
MATCH_NAME='([\w\/:]+( [\w\/:]+)*)'

numberOfMasterDevices=$(xinput |grep -c "master pointer")
##default settings
quiet=false
forceCreate=0
createSavedMasters=0
loadFromFile=1
ignoreKnownSlaves=0
configFile="$HOME/.config/dualpointerx.conf"

##global vars
masterDevices=()
listOfIDs=()

# create config file if it does not exist
if [[ ! -e "$configFile" ]]; then 
    mkdir -p "$HOME/.config"
    touch "$configFile"    
fi






########################################IO########################################

load(){
    while IFS=$'\t' read -r -a masterDefaults
    do
        listOfIDs=()
        masterExists=0
        masterDevices+=("$masterDefaults") #name
        xinput list --id-only "$masterDefaults pointer" &>/dev/null && masterExists=1
        
        ## attach all specified slaves to master
        if [[ $loadFromFile && $createSavedMasters -eq 1 ]]; then
            if [[ $masterExists -ne 1 ]]; then 
                if [[ $forceCreate -ne 1 ]]; then
                    for i in "${masterDefaults[@]:1}"; do
                        if xinput |grep "$i" >/dev/null; then 
                            masterExists=1
                            createMaster "$masterDefaults" || masterExists=0
                            break
                        fi
                    done
                else
                    createMaster "$masterDefaults" || masterExists=0
                fi
            fi
            if [[ $masterExists -eq 1 ]]; then 
                for i in "${masterDefaults[@]:1}"; do
                
                    knownSlaves[$i]="$masterDefaults"
                    
                    if [[ $masterExists -eq 1 ]]; then 
                        #while we expect this to only return 1 value, if one slave's name is a prefix of the other then they will both appear
                        while IFS=$'\t' read -r -a slaveID; do
                            listOfIDs+=("$slaveID") 
                        done < <(xinput |grep "$i" |perl -lne 'print "$1" if /.*id=(\d*).*slave/')
                    fi
                done
                dualWield "$masterDefaults"
            fi
        fi
    done < "$configFile"
    listOfIDs=()
}
save(){
    
    declare -A mapMasterToId
    currentMasters=()
    
    while IFS=$'\t' read -r -a masterInfo; do
       currentMasters+=("$masterInfo")
       mapMasterToId["${masterInfo[0]}"]="${masterInfo[1]}"
    done < <(xinput |grep "\\[master " |perl -lne 'print "$4\t$1" if /'"$MATCH_NAME"' (pointer|keyboard).*id=(\d*)/')
    echo -n "" > "$configFile"
    for i in "${currentMasters[@]}"; do 
        printf "%s" "${mapMasterToId[$i]}" >>"$configFile"
        while read -r slaveInfo; do
            printf "\\t%s" "$slaveInfo" >> "$configFile"
        done < <( xinput |grep "\\[slave " |perl -lne 'print "$1" if /'"$MATCH_NAME"'.*\('"$i"'\)/')
        echo "" >> "$configFile"
    done
}

####################################Read State##########################


getNameFromId(){
    xinput list --name-only "$1" 
}
getIdFromName(){
    xinput list --id-only "$1" 
}
getDeviceType(){
    deviceID="$1"
    deviceName=$(getNameFromId "$deviceID" )
    deviceInfo=$(xinput --list "$deviceID")
    #echo "$deviceID $deviceName"
    if ignoreSlaveDevice "$deviceName"; then
        return 0
    elif echo "$deviceInfo" |grep -q "ButtonClass"; then
        return $TYPE_MOUSE
    elif echo "$deviceInfo" |grep -q "KeyClass" ; then
        return $TYPE_KEYBOARD          
    fi
}

readAllIDs() {
    while read -r -a id; do
        listOfIDs+=("$id")
    done < <(xinput list --id-only)
}
readAllMovingIds() {
    exitCode=1

    while read -r deviceId; do
        if read -t .2 < <(timeout .3 xinput test "$deviceId"); then  #if is moving/button click
            listOfIDs+=("$deviceId")
            ! $quiet && echo "moving $deviceId"
            exitCode=0
        fi
    done < <(xinput |grep "slave" |perl -lne 'print "$1" if /id=(\d*)/')
    return $exitCode
}
###############HELPER FUNCTIONS###########################################

ignoreSlaveDevice(){
    deviceName=$1
    #echo "${knownSlaves[$deviceName]}"
    if [[ $deviceName == *"XTEST"* ]] || echo "$deviceInfo" |grep -q "master"  ; then
        return 0
    elif [[ "$ignoreKnownSlaves" -eq 1 && ${knownSlaves[$deviceName]} ]]; then
        return 0
    else 
        return 1
    fi
}

attachSlaveToMaster(){
    slaveID="$1"
    masterID="$2"
    
    ! xinput list --short "$slaveID" |grep -q "($id)]" &&  xinput reattach "$slaveID" "$masterID"
}
notify(){
    ! $quiet && notify-send "$1"
}

createMaster(){
    if [[ -z $1 ]]; then 
        echo "will not create master with blank name"
        return 1
    elif xinput | grep -q "$1 pointer \\s*id=.*master" ; then
        return 0
    else 
        xinput create-master "$1"
    fi
}

nextMaster() {
    if [[ ! -z $nextMaster ]]; then
       echo "$nextMaster"
       return 0
    fi
    for name in "${masterDevices[@]:1}"; do
        if ! xinput |grep "master pointer"|grep "$name" &>/dev/null; then 
        	echo "$name"
        	return 0;
	    fi
    done
    echo "masterDevice$((numberOfMasterDevices+1))"
    return 0;
}





########################MODES################################
dualWield() {
	
    miceToEnslave=()
    keyboardsToEnslave=()
    nonEmpty=""
    for i in "${listOfIDs[@]}"; do
        deviceId="$i"
        getDeviceType "$deviceId"
        type=$?
        
        if [[ $type -ne 0 ]] ; then
            nonEmpty=1
            if [[ $type -eq $TYPE_MOUSE ]]; then
               miceToEnslave+=("$deviceId");
            elif [[ $type -eq $TYPE_KEYBOARD ]]; then
               keyboardsToEnslave+=("$deviceId");
            fi
            fi                
    done
    if [[ "$nonEmpty" ]]; then
        if [[ -z $1 ]]; then 
            targetMasterDevice="$(nextMaster)"
            createMaster "$targetMasterDevice"
        else
            targetMasterDevice="$1"
        fi
        
        ## ataching slaves to masters
        id=$(getIdFromName "$targetMasterDevice pointer")
        for device in "${miceToEnslave[@]}"; do
            echo "$device -> $id"
            attachSlaveToMaster "$device" "$id"
        done
        id=$(getIdFromName "$targetMasterDevice keyboard")
        for device in "${keyboardsToEnslave[@]}"; do
            attachSlaveToMaster "$device" "$id"
        done
    else
        return 1
    fi
}



singleWield() {
    ! $quiet && notify "exiting dual wield mode"
    master="$(xinput --list --id-only |head -n1)"
	while IFS=$'\t' read -r -a deviceId; do
	    if [[ "$deviceId" != "$master" ]];then
    	        xinput remove-master "$deviceId" AttachToMaster "$master" #&>/dev/null
	    fi
	done < <(xinput |grep "master pointer" |perl -lne 'print $1 if /id=(\d*)/')
	return 0
}

###################################COMMANDS#############################################
#Commands can all be called directly and should exit on completion


displayHelp(){
    SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
    SCRIPT_NAME="$(basename ${0})"
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ;
    exit 0
}

version(){
    #scriptinfo
    echo 1.1.3
    exit 0
}
start(){
    createSavedMasters=1
    load
    exit $?
}
resume(){
    load
    exit $?
}

dynamicAssigment(){
    load
    readAllMovingIds && dualWield
    exit $?
}
reset(){
    singleWield
    exit $?
}
moveUnknownsToNextMaster(){
    ignoreKnownSlaves=1
    load
    readAllIDs
    echo "${listOfIDs[@]}"
    dualWield
    exit $?
}
edit(){
    "$EDITOR" "$configFile"
}


#set default action
action="resume"
optspec=":hvqcfersl:d-:"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                dynamic)
                    action="dynamicAssigment"
                    ;;
                edit)
                    action="edit"
                    ;;
                file)
                    configFile="${OPTARG[1]}"
                    ;;
                force-create)
                    forceCreate=0;
                    ;;
                help)
                    displayHelp
                    ;;
                ignore-known-slaves)
                    ignoreKnownSlaves=1
                    ;;
                load)
                    action="resume"
                    ;;
                master=*)
                    val=${OPTARG#*=}
                    nextMaster="$val"
                    ;;
                next)
                    action="moveUnknownsToNextMaster"
                    ;;
                
                no-load)
                    loadFromFile=0
                    ;;
                    
                quiet)
                    quiet=1
                    ;;
                reload)
                    action="singleWield;load"
                    ;;
                reset)
                    action="reset"
            		;;
                resume)
                    action="resume"
                    ;;
                start)
                    action="start"
                    ;;
                save)
                    action="save"
                    ;;
                version)
                    version
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
        h)
            displayHelp
            ;;
        v)
            version
            ;;
        q)
            quiet=1
            ;;
        c)
            createSavedMasters=1
            ;;
        f)
            forceCreate=1;
            ;;
        i)
            ignoreKnownSlaves=1
            ;;
        e)
            action="edit"
            ;;
        l)
            action="resume"
            ;;
        s)
            action="start"
            ;;
        r)
            action="reset"
	        ;;
        d)
            action="dynamicAssigment"
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            displayHelp
            ;;
    esac
done
$action

